// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: proto/md5.proto

package grpcclient

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// Md5GrpcClient is the client API for Md5Grpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type Md5GrpcClient interface {
	Md5Service(ctx context.Context, in *Md5Request, opts ...grpc.CallOption) (*Md5Reply, error)
}

type md5GrpcClient struct {
	cc grpc.ClientConnInterface
}

func NewMd5GrpcClient(cc grpc.ClientConnInterface) Md5GrpcClient {
	return &md5GrpcClient{cc}
}

func (c *md5GrpcClient) Md5Service(ctx context.Context, in *Md5Request, opts ...grpc.CallOption) (*Md5Reply, error) {
	out := new(Md5Reply)
	err := c.cc.Invoke(ctx, "/smartgrpcproto.Md5Grpc/Md5Service", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Md5GrpcServer is the server API for Md5Grpc service.
// All implementations must embed UnimplementedMd5GrpcServer
// for forward compatibility
type Md5GrpcServer interface {
	Md5Service(context.Context, *Md5Request) (*Md5Reply, error)
	mustEmbedUnimplementedMd5GrpcServer()
}

// UnimplementedMd5GrpcServer must be embedded to have forward compatible implementations.
type UnimplementedMd5GrpcServer struct {
}

func (UnimplementedMd5GrpcServer) Md5Service(context.Context, *Md5Request) (*Md5Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Md5Service not implemented")
}
func (UnimplementedMd5GrpcServer) mustEmbedUnimplementedMd5GrpcServer() {}

// UnsafeMd5GrpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to Md5GrpcServer will
// result in compilation errors.
type UnsafeMd5GrpcServer interface {
	mustEmbedUnimplementedMd5GrpcServer()
}

func RegisterMd5GrpcServer(s grpc.ServiceRegistrar, srv Md5GrpcServer) {
	s.RegisterService(&Md5Grpc_ServiceDesc, srv)
}

func _Md5Grpc_Md5Service_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Md5Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Md5GrpcServer).Md5Service(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/smartgrpcproto.Md5Grpc/Md5Service",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Md5GrpcServer).Md5Service(ctx, req.(*Md5Request))
	}
	return interceptor(ctx, in, info, handler)
}

// Md5Grpc_ServiceDesc is the grpc.ServiceDesc for Md5Grpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Md5Grpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "smartgrpcproto.Md5Grpc",
	HandlerType: (*Md5GrpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Md5Service",
			Handler:    _Md5Grpc_Md5Service_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/md5.proto",
}
